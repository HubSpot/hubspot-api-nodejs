/**
 * Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* File
*/
export class ModelFile {
    /**
    * File ID.
    */
    'id': string;
    /**
    * Creation time of the file object.
    */
    'createdAt': Date;
    /**
    * Deletion time of the file object.
    */
    'archivedAt'?: Date;
    /**
    * Timestamp of the latest update to the file.
    */
    'updatedAt': Date;
    /**
    * If the file is deleted.
    */
    'archived': boolean;
    /**
    * Id of the folder the file is in.
    */
    'parentFolderId'?: string;
    /**
    * Name of the file.
    */
    'name'?: string;
    /**
    * Path of the file in the file manager.
    */
    'path'?: string;
    /**
    * Size in bytes of the file.
    */
    'size'?: number;
    /**
    * For image and video files, the height of the content.
    */
    'height'?: number;
    /**
    * For image and video files, the width of the content.
    */
    'width'?: number;
    /**
    * Encoding of the file.
    */
    'encoding'?: string;
    /**
    * Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.
    */
    'type'?: string;
    /**
    * Extension of the file. For example png.
    */
    'extension'?: string;
    /**
    * Default hosting URL of the file. This will use one of HubSpot\'s provided URLs to serve the file.
    */
    'defaultHostingUrl'?: string;
    /**
    * URL of the given file. This URL can change depending on the domain settings of the account. Will use the select file hosting domain.
    */
    'url'?: string;
    /**
    * Previously \"archied\". Indicates if the file should be used when creating new content like web pages.
    */
    'isUsableInContent'?: boolean;
    /**
    * File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.
    */
    'access': ModelFile.AccessEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date"
        },
        {
            "name": "archivedAt",
            "baseName": "archivedAt",
            "type": "Date"
        },
        {
            "name": "updatedAt",
            "baseName": "updatedAt",
            "type": "Date"
        },
        {
            "name": "archived",
            "baseName": "archived",
            "type": "boolean"
        },
        {
            "name": "parentFolderId",
            "baseName": "parentFolderId",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "number"
        },
        {
            "name": "height",
            "baseName": "height",
            "type": "number"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "number"
        },
        {
            "name": "encoding",
            "baseName": "encoding",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "extension",
            "baseName": "extension",
            "type": "string"
        },
        {
            "name": "defaultHostingUrl",
            "baseName": "defaultHostingUrl",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "isUsableInContent",
            "baseName": "isUsableInContent",
            "type": "boolean"
        },
        {
            "name": "access",
            "baseName": "access",
            "type": "ModelFile.AccessEnum"
        }    ];

    static getAttributeTypeMap() {
        return ModelFile.attributeTypeMap;
    }
}

export namespace ModelFile {
    export enum AccessEnum {
        PublicIndexable = <any> 'PUBLIC_INDEXABLE',
        PublicNotIndexable = <any> 'PUBLIC_NOT_INDEXABLE',
        HiddenIndexable = <any> 'HIDDEN_INDEXABLE',
        HiddenNotIndexable = <any> 'HIDDEN_NOT_INDEXABLE',
        HiddenPrivate = <any> 'HIDDEN_PRIVATE',
        Private = <any> 'PRIVATE'
    }
}
