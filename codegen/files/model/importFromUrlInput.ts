/**
 * Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class ImportFromUrlInput {
    /**
    * PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can\'t* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can\'t* index the file. 
    */
    'access': ImportFromUrlInput.AccessEnum;
    /**
    * Time to live. If specified the file will be deleted after the given time frame.
    */
    'ttl'?: string;
    /**
    * Name to give the resulting file in the file manager.
    */
    'name'?: string;
    /**
    * URL to download the new file from.
    */
    'url': string;
    /**
    * One of folderId or folderPath is required. Destination folder ID for the uploaded file.
    */
    'folderId'?: string;
    /**
    * One of folderPath or folderId is required. Destination folder path for the uploaded file. If the folder path does not exist, there will be an attempt to create the folder path.
    */
    'folderPath'?: string;
    /**
    * NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead. 
    */
    'duplicateValidationStrategy': ImportFromUrlInput.DuplicateValidationStrategyEnum;
    /**
    * ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder. 
    */
    'duplicateValidationScope': ImportFromUrlInput.DuplicateValidationScopeEnum;
    /**
    * If true, it will overwrite existing files if a file with the same name exists in the given folder.
    */
    'overwrite': boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "access",
            "baseName": "access",
            "type": "ImportFromUrlInput.AccessEnum"
        },
        {
            "name": "ttl",
            "baseName": "ttl",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "folderId",
            "baseName": "folderId",
            "type": "string"
        },
        {
            "name": "folderPath",
            "baseName": "folderPath",
            "type": "string"
        },
        {
            "name": "duplicateValidationStrategy",
            "baseName": "duplicateValidationStrategy",
            "type": "ImportFromUrlInput.DuplicateValidationStrategyEnum"
        },
        {
            "name": "duplicateValidationScope",
            "baseName": "duplicateValidationScope",
            "type": "ImportFromUrlInput.DuplicateValidationScopeEnum"
        },
        {
            "name": "overwrite",
            "baseName": "overwrite",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return ImportFromUrlInput.attributeTypeMap;
    }
}

export namespace ImportFromUrlInput {
    export enum AccessEnum {
        PublicIndexable = <any> 'PUBLIC_INDEXABLE',
        PublicNotIndexable = <any> 'PUBLIC_NOT_INDEXABLE',
        HiddenIndexable = <any> 'HIDDEN_INDEXABLE',
        HiddenNotIndexable = <any> 'HIDDEN_NOT_INDEXABLE',
        HiddenPrivate = <any> 'HIDDEN_PRIVATE',
        Private = <any> 'PRIVATE'
    }
    export enum DuplicateValidationStrategyEnum {
        None = <any> 'NONE',
        Reject = <any> 'REJECT',
        ReturnExisting = <any> 'RETURN_EXISTING'
    }
    export enum DuplicateValidationScopeEnum {
        EntirePortal = <any> 'ENTIRE_PORTAL',
        ExactFolder = <any> 'EXACT_FOLDER'
    }
}
