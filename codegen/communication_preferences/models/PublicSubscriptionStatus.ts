/**
 * Subscriptions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export class PublicSubscriptionStatus {
    /**
    * The ID of the brand that the subscription is associated with, if there is one.
    */
    'brandId'?: number;
    /**
    * The name of the subscription.
    */
    'name': string;
    /**
    * A description of the subscription.
    */
    'description': string;
    /**
    * The legal reason for the current status of the subscription.
    */
    'legalBasis'?: PublicSubscriptionStatusLegalBasisEnum;
    /**
    * The name of the preferences group that the subscription is associated with.
    */
    'preferenceGroupName'?: string;
    /**
    * The ID for the subscription.
    */
    'id': string;
    /**
    * A more detailed explanation to go with the legal basis.
    */
    'legalBasisExplanation'?: string;
    /**
    * Whether the contact is subscribed.
    */
    'status': PublicSubscriptionStatusStatusEnum;
    /**
    * Where the status is determined from e.g. PORTAL_WIDE_STATUS if the contact opted out from the portal.
    */
    'sourceOfStatus': PublicSubscriptionStatusSourceOfStatusEnum;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "brandId",
            "baseName": "brandId",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "legalBasis",
            "baseName": "legalBasis",
            "type": "PublicSubscriptionStatusLegalBasisEnum",
            "format": ""
        },
        {
            "name": "preferenceGroupName",
            "baseName": "preferenceGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "legalBasisExplanation",
            "baseName": "legalBasisExplanation",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "PublicSubscriptionStatusStatusEnum",
            "format": ""
        },
        {
            "name": "sourceOfStatus",
            "baseName": "sourceOfStatus",
            "type": "PublicSubscriptionStatusSourceOfStatusEnum",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return PublicSubscriptionStatus.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum PublicSubscriptionStatusLegalBasisEnum {
    LegitimateInterestPql = 'LEGITIMATE_INTEREST_PQL',
    LegitimateInterestClient = 'LEGITIMATE_INTEREST_CLIENT',
    PerformanceOfContract = 'PERFORMANCE_OF_CONTRACT',
    ConsentWithNotice = 'CONSENT_WITH_NOTICE',
    NonGdpr = 'NON_GDPR',
    ProcessAndStore = 'PROCESS_AND_STORE',
    LegitimateInterestOther = 'LEGITIMATE_INTEREST_OTHER'
}
export enum PublicSubscriptionStatusStatusEnum {
    Subscribed = 'SUBSCRIBED',
    NotSubscribed = 'NOT_SUBSCRIBED'
}
export enum PublicSubscriptionStatusSourceOfStatusEnum {
    PortalWideStatus = 'PORTAL_WIDE_STATUS',
    BrandWideStatus = 'BRAND_WIDE_STATUS',
    SubscriptionStatus = 'SUBSCRIPTION_STATUS'
}

